generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////
// Logging Management //
////////////////////////

model Log {
  id      String @id @default(uuid())
  context String
  action  String // method::handler

  metadata Json?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////
// Users Management //
//////////////////////

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  name     String
  password String

  status UserStatus @default(ENABLED)

  logs    Log[]
  roles   UserRole[]
  groups  UserGroup[]
  entries FormEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ENABLED
  DISABLED
}

model UserRole {
  id          String @id @default(uuid())
  type        String @unique
  name        String
  description String

  config Json?

  permissions UserRolePermission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRolePermission {
  id     String @id @default(uuid())
  action String // scope::action

  role   UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, roleId])
}

model UserGroup {
  id          String  @id @default(uuid())
  name        String
  description String?

  members User[]
  forms   Form[]

  assignmentHistory InventoryMovement[] @relation("AssignmentHistory")
  dischargeHistory  InventoryMovement[] @relation("DischargeHistory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////
// Forms Management //
//////////////////////

model Form {
  id          String  @id @default(uuid())
  slug        String  @unique
  title       String
  description String?

  config Json?

  status     FormStatus     @default(DRAFT)
  visibility FormVisibility @default(PRIVATE)

  fields  FormField[]
  entries FormEntry[]

  group   UserGroup @relation(fields: [groupId], references: [id], onDelete: Restrict)
  groupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FormStatus {
  DRAFT
  PUBLISHED
  HIDDEN
}

enum FormVisibility {
  PUBLIC
  PROTECTED
  PRIVATE
}

model FormField {
  id          String  @id @default(uuid())
  title       String
  description String?

  order Int @default(autoincrement())

  config Json?

  type FormFieldType

  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, formId])
  @@unique([description, formId])
}

enum FormFieldType {
  TEXT
  TEXTAREA
  NUMBER

  DNI
  PHONE
  EMAIL

  CHECKBOX
  SELECT
  RADIO

  TIME
  DATE
  DATETIME

  FILES

  USERS

  SECTION
  TABLE
}

model FormEntry {
  id String @id @default(uuid())

  answers Json[] @default([]) // Array<{ field: FormField, content: FormFieldAnswer }>

  answeredBy   User?   @relation(fields: [answeredById], references: [id], onDelete: Restrict)
  answeredById String?

  form   Form   @relation(fields: [formId], references: [id], onDelete: Restrict)
  formId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////
// Nobu Management //
/////////////////////

///////////////////////
// Events Management //
///////////////////////

model Event {
  id          String  @id @default(uuid())
  slug        String  @unique
  title       String
  description String?

  status EventStatus @default(SCHEDULED)

  guests EventGuest[]

  scheduledAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  SCHEDULED
  OVERDUED
}

model EventGuest {
  id   String @id @default(uuid())
  dni  String
  name String

  email String
  phone String

  from     String
  position String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dni, eventId])
}

//////////////////////////
// Trainings Management //
//////////////////////////

//////////////////////////
// Warehouse Management //
//////////////////////////

model Supply {
  id          String  @id @default(uuid())
  code        String
  name        String
  description String?

  quantity Int @default(0)

  unit SupplyUnit

  movementHistory InventoryMovementItem[]
  orderHistory    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SupplyUnit {
  UNIT
  PACK
  BOX

  BLOCK
  REAM
  BALE

  SACK
  GALLON
}

model Supplier {
  id          String  @id @default(uuid())
  name        String
  description String?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id   String @id @default(uuid())
  code String

  status OrderStatus @default(PENDING)

  items OrderItem[]

  movements InventoryMovement[]

  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  supplierId String

  deliveryAt DateTime[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PARTIAL
  COMPLETED
  CANCELLED
}

model OrderItem {
  id    String @id @default(uuid())
  price Float

  quantity Int
  received Int[] @default([])

  deliveryStatus OrderItemDeliveryStatus @default(PENDING)

  supply   Supply @relation(fields: [supplyId], references: [id], onDelete: Restrict)
  supplyId String

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderItemDeliveryStatus {
  PENDING
  PARTIAL
  COMPLETED
}

model InventoryMovement {
  id      String  @id @default(uuid())
  concept String?

  type InventoryMovementType

  items InventoryMovementItem[]

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Restrict)
  orderId String?

  origin   UserGroup? @relation(name: "DischargeHistory", fields: [originId], references: [id])
  originId String?

  destination   UserGroup? @relation(name: "AssignmentHistory", fields: [destinationId], references: [id])
  destinationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InventoryMovementType {
  ADJUSTMENT
  INPUT
  OUTPUT
  TRANSFER
  DISCHARGE
}

model InventoryMovementItem {
  id       String @id @default(uuid())
  quantity Int

  supply   Supply @relation(fields: [supplyId], references: [id], onDelete: Restrict)
  supplyId String

  movement   InventoryMovement @relation(fields: [movementId], references: [id], onDelete: Cascade)
  movementId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

////////////////////////
// Uploads Management //
////////////////////////

model File {
  id   String @id @default(uuid())
  path String @unique

  mime      String
  extension String

  size       Int
  dimensions Int[]

  name    String
  caption String?
  alt     String?

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, folderId])
}

model Folder {
  id   String @id @default(uuid())
  name String

  files   File[]
  folders Folder[] @relation("FolderFolders")

  folder   Folder? @relation(name: "FolderFolders", fields: [folderId], references: [id], onDelete: Cascade)
  folderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, folderId])
}
